import json
from abc import ABC, abstractmethod

import geopandas as gpd
from openai import OpenAI
from shapely.geometry import Polygon


class EnvironmentalAssistantBase(ABC):
    def __init__(self, df: gpd.GeoDataFrame, client: OpenAI):
        """
        Base class for environmental assistants conducting environmental impact assessments.

        :param df: GeoDataFrame containing geospatial data.
        :param client: OpenAI client for interacting with GPT models.
        """
        self.df = df
        self.client = client

    @abstractmethod
    def system_prompt(self) -> str:
        """
        Generates the system prompt that defines the context and instructions for the analysis.
        Must be implemented by subclasses.
        """
        pass

    @abstractmethod
    def evaluate_project(self, location: Polygon, *args, **kwargs) -> dict:
        """
        Conducts the project evaluation based on the provided location.
        Must be implemented by subclasses.

        :param location: Polygon representing the location to evaluate.
        :return: Dictionary with the evaluation results.
        """
        pass

    def format_message(self, data: gpd.GeoDataFrame) -> str:
        """
        Formats the message with relevant geospatial data for the analysis.

        :param data: GeoDataFrame containing the data to include in the message.
        :return: Formatted message as a string.
        """
        data_dict = data.to_dict("records")
        return f"""
        Here are the relevant data for the analysis:
        {json.dumps(data_dict, indent=2)}
        """

    def generate_response(
        self, system_prompt: str, message: str, *args, **kwargs
    ) -> dict:
        """
        Generates a response based on the system prompt and the user message.

        :param system_prompt: The prompt defining the system context.
        :param message: The user message containing the analysis data.
        :return: Dictionary containing the response generated by OpenAI.
        """
        try:
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message},
            ]
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0,
                *args,
                **kwargs,  # Allows passing additional arguments to the method
            )
            return json.loads(response.choices[0].message["content"])
        except Exception as e:
            return {
                "emoji": "‚ùå",
                "summary": "Error during the evaluation.",
                "evaluation": str(e),
            }
